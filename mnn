 class ReadJSON extends AsyncTask<String, Integer, String> {



        @Override
        protected String doInBackground(String... params) {
            return readURL(params[0]);
        }

        @Override
        protected void onPostExecute(String content) {

            final String [] movie_image = new String[content.length()];
            final String [] movie_name = new String[content.length()];
            final String [] movie_id = new String[content.length()];
            final String [] movie_link = new String[content.length()];
            final String [] movie_new = new String[content.length()];
            final String [] movie_date = new String[content.length()];
            final String [] movie_language = new String[content.length()];
            final String [] add_image = new String[content.length()];
            final String [] add_imagelink = new String[content.length()];
            try {
                JSONObject jsonObject = new JSONObject(content);
                JSONArray jsonArray =  jsonObject.getJSONArray("products");

                for(int i =0;i<jsonArray.length(); i++){
                    JSONObject productObject = jsonArray.getJSONObject(i);
                    arrayList.add(new Product(
                            movie_image [i] = productObject.getString("image"),
                            movie_new [i] = productObject.getString("new"),
                            movie_name [i]= productObject.getString("name"),
                            movie_date [i]= productObject.getString("date"),
                            movie_language [i]= productObject.getString("language"),
                            movie_link [i]= productObject.getString("link"),
                            movie_id [i]= productObject.getString("idd"),
                            add_image [i]= productObject.getString("addimage"),
                            add_imagelink [i]= productObject.getString("addimagelink")
                    ));
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }


            final CustomListAdapter adapter = new CustomListAdapter(
                    getApplicationContext(), R.layout.custom_list_layout, arrayList
            );
            lv.setAdapter(adapter);

            lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    Intent intent = new Intent(MainActivity.this, YoutubeActivity.class);
//                        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse(news_title[position]));
                    intent.putExtra("MovieName", movie_name [position]);
                    intent.putExtra("image", movie_image[position]);
                    intent.putExtra("MovieLanguage", movie_language[position]);
                    intent.putExtra("MovieId", movie_id[position]);
                    intent.putExtra("MovieLink", movie_link[position]);
                    intent.putExtra("AddImage", add_image[position]);
                    intent.putExtra("AddImagelink", add_imagelink[position]);
                    startActivity(intent);
//                    if (mInterstitialAd.isLoaded()) {
//                        mInterstitialAd.show();
//                    } else {
//                        Log.d("TAG", "The interstitial wasn't loaded yet.");
//                    }
                    //finish();
                    Apploving.showInterstitial(MainActivity.this);
                    if ( interstitialAd.isReady() )
                    {
                        interstitialAd.showAd();
                    }

                }
            });

            searchView.setOnQueryTextListener( new SearchView.OnQueryTextListener() {


                @Override
                public boolean onQueryTextChange(String newText) {
                    ArrayList<Product> templist = new ArrayList<>(  );

                    for(Product temp : arrayList)
                    {
                        if (temp.name.toLowerCase().contains( newText.toLowerCase() ))
                        { templist.add( temp ); }
                    }

                   /* CustomListAdapter adapter = new CustomListAdapter(
                            getApplicationContext(), R.layout.custom_list_layout, templist
                    );
                    lv.setAdapter(adapter);*/

                    CustomListAdapter adapter = new CustomListAdapter(
                            getApplicationContext(), R.layout.custom_list_layout, templist
                    );
                    lv.setAdapter(adapter);


                    return true;
                }


                @Override
                public boolean onQueryTextSubmit(String query) {
                    return false;
                }

            } );

        }}

    private static String readURL(String theUrl) {

        StringBuilder content = new StringBuilder();
        try {
            // create a url object
            URL url = new URL(theUrl);
            // create a urlconnection object
            URLConnection urlConnection = url.openConnection();
            // wrap the urlconnection in a bufferedreader
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String line;
            // read from the urlconnection via the bufferedreader
            while ((line = bufferedReader.readLine()) != null) {
                content.append(line + "\n");
            }
            bufferedReader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return content.toString();


    }
